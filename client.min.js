



root.setThemes([
    am5themes_Animated.new(root)
]);

var container = root.container.children.push(am5.Container.new(root, {
    width: am5.percent(100),
    height: am5.percent(100),
    layout: root.verticalLayout
}));

var series = container.children.push(am5hierarchy.Tree.new(root, {
    singleBranchOnly: false,
    downDepth: 1,
    initialDepth: 10,
    valueField: "value",
    categoryField: "name",
    childDataField: "children"
}));
series.circles.template.setAll({
    templateField: "nodeSettings",

});
series.nodes.template.setAll({
    toggleKey: "none",
    cursorOverStyle: "default"
});
series.outerCircles.template.setAll({
    strokeWidth: 0,
    fillOpacity: 0.1,
});
series.links.template.setAll({

    strokeWidth: 5,
    strokeOpacity: 2,

});
let storeRoot = null;
series.nodes.template.events.on("click", function (ev) {
    var data = ev.target.dataItem.dataContext;
    $("#Root").val(data.name)
    storeRoot = data;
});

series.set("fill", am5.color(0xff0000));
var data = {
    name: "S",
    children: []
}
let tree = new Tree();
tree.root = new Node(null, "A");

function addChild(){
    if(storeRoot!= null){
        storeRoot.addChild($("#children").val())
        series.data.setAll([tree.root]);
        $("#children").val("")
    }
}
function cal(){
    let minimax1 = new Minimax();
    console.log("Minimax: ", minimax1.minimax(tree.root, $("#option") == "max", "-9999", "9999"));
    series.data.setAll([tree.root]);
}




generateLevel(tree, "", 0);

series.data.setAll([tree.root]);
series.set("selectedDataItem", series.dataItems[0]);

function generateLevel(root) {
}


// Make stuff animate on load
series.appear(1000, 100);